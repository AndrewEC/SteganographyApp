<docs>
    <members name="Exceptions">
        <GeneralMessage>
            <summary>Initializes the exception with a message.</summary>
            <param name="message">The message detailing the error that has ocurred.</param>
        </GeneralMessage>
        <GeneralMessageInner>
            <summary>Initializes the exception with a message and a cause.</summary>
            <param name="message">The message detailing the error that has ocurred.</param>
            <param name="inner">The actual exception that triggered this exception.</param>
        </GeneralMessageInner>
    </members>
    <members name="InputArguments">
        <Password>
            <summary>
                The password used to encrypt or decrypt the contents of a file.
                Only used when encoding or decoding a file.
            </summary>
        </Password>
        <FileToEncode>
            <summary>
                The relative or absolute path to the file to encode. Only used when encoding a file.
            </summary>
        </FileToEncode>
        <DecodedOutputFile>
            <summary>
                The path the decoded file contents will be written to. Only used when decoding a file.
            </summary>
        </DecodedOutputFile>
        <CoverImages>
            <summary>
                The paths to the images to read from or write to. This may be used when encoding a file,
                decoding a file, cleaning the images, or calculating the storage space of a series of images.
            </summary>
        </CoverImages>
        <UseCompression>
            <summary>
                Indicates whether or not the contents being encoded, decoded, or calculate, should be compressed
                using a standard GZip compression algorithm.
            </summary>
        </UseCompression>
        <RandomSeed>
            <summary>
                A starting seed for the random number generator used when encoding, decoding, and calculating encrypted
                size of a file.
            </summary>
        </RandomSeed>
        <DummyCount>
            <summary>
                Indicates the number of dummies to insert or remove from the contents of a file when encoding, decoding,
                and calculating the encrypted size of a file.
            </summary>
        </DummyCount>
        <DeleteAfterConversion>
            <summary>
                Specifies whether or not the original image should be deleted after being converted to a PNG image.
                Only used by the Converter.
            </summary>
        </DeleteAfterConversion>
        <ChunkByteSize>
            <summary>
                Gets the chunk size. I.e. the number of bytes to read, encode, and write at any given time.
                <para>Higher values will improve the time to encode a larger file and reduce
                ther overall encoded file size though values too high run the risk of having memory related errors.</para>
                <para>Default value of 131,072.</para>
            </summary>
        </ChunkByteSize>
        <ImageFormat>
            <summary>
                The desired output file type. Can be either png or webp.
                <para>Webp is a smaller format but takes much longer to process than a png.</para>
                <para>Can only be used with the converter.</para>
            </summary>
        </ImageFormat>
        <AdditionalPasswordHashIterations>
            <summary>
                The additional number of times the password should be hashed before being encrypting or decrypting content.
                <para>Has no effect if no password has been provided.</para>
            </summary>
        </AdditionalPasswordHashIterations>
        <BitsToUse>
            <summary>
                Specifies the number of bits to read or write, starting the least significant bit, from each RGB value in
                each pixel from the cover images.
            </summary>
        </BitsToUse>
    </members>
    <members name="ImageStore">
        <OpenStream>
            <summary>
                Utility method to create an <see cref="ImageStoreStream"/> instance to be used in conjunction with the
                read and write methods.
                <para>The ImageStoreWrapper instance provides proxies to the ImageStore IO methods as well as
                implementing the IDisposable interface to ensure that any currently open and loaded image
                will be properly disposed.</para>
            </summary>
            <param name="mode">The mode specifying which types of IO operations should
            be permitted.</param>
            <returns>A new wrapper for safely using the image store IO methods.</returns>
        </OpenStream>
        <CurrentImage>
            <summary>
                Gets the currently loaded image. The image is loaded whenever the Next
                method is called and the currentImageIndex has been incremented.
            </summary>
        </CurrentImage>
    </members>
    <members name="ImageStoreStream">
        <WriteContentChunkToImage>
            <summary>
                Invokes the wrapped image store WriteBinaryString method passing in the provided <paramref name="binary"/> argument.
            </summary>
            <param name="binary">The binary chunk to write to the cover images.</param>
            <returns>A count of the number of bits that were written to the image.</returns>
        </WriteContentChunkToImage>
        <ReadContentChunkFromImage>
            <summary>
                Invokes the wrapped image store ReadBinaryString methods passing in the provided <paramref name="length"/> argument.
            </summary>
            <param name="length">The number of bits to read from the cover images.</param>
            <returns>
                A binary string read from the cover images whose length is, at most,
                the length as specified by the input argument of the same name.
            </returns>
        </ReadContentChunkFromImage>
        <SeekToPixel>
            <summary>
                Invokes the wrapped image store SeekToPixel method passing in the provided <paramref name="bitsToSkip"/> argument.
                This will first move to the first pixel in the currently loaded image before skipping to the specified pixel.
            </summary>
            <param name="bitsToSkip">The number of bigs to seek past.</param>
        </SeekToPixel>
        <SeekToImage>
            <summary>
                Invokes the wrapped image store ResetToImage method passing in the provided <paramref name="index"/> argument.
            </summary>
            <param name="index">The index of the cover image to start reading and writing from.</param>
        </SeekToImage>
    </members>
    <members name="BinaryUtil">
        <ToBinaryString>
            <summary>
                Converts a byte array into a binary string representation. This will convert each byte into a padded 8 bit string
                and concatenate all values into a single string.
            </summary>
            <param name="bytes">The array of bytes to be converted into a binary string.</param>
            <returns>A binary representation of the input byte array.</returns>
        </ToBinaryString>
        <ToBinaryStringDirect>
            <summary>
                Converts a byte array into a binary string representation. This expects each byte in the array to
                have a decimal value of 0 or 1. Each by will thus be added to the binary string using their
                direct decimal representation.
            </summary>
            <param name="bytes">The array of bytes to be converted into a binary string.</param>
            <returns>A binary representation of the input byte array.</returns>
        </ToBinaryStringDirect>
        <ToBytes>
            <summary>
                Converts a given binary string into an array of bytes. This break the binary string down and take 8 characters, 8 bits,
                at a time and convert that set of 8 bits to a byte value before aggregating the values in the byte array.
                This method expecs the binary string to have a length equally divisible by 8.
            </summary>
            <param name="binary">The binary string to be converted to a byte array.</param>
            <returns>A byte array representation of the original input binary string.</returns>
        </ToBytes>
        <ToBytesDirect>
            <summary>
                Converts a given binary string into an array of bytes. This will take each bit in the binary string and convert that bit
                directly into a byte. This means the resulting byte array will only have values of 0 or 1.
            </summary>
            <param name="binary">The binary string to be converted to a byte array.</param>
            <returns>A byte array representation of the roiginal input binary string.</returns>
        </ToBytesDirect>
    </members>
    <members name="CompressionUtil">
        <Compress>
            <summary>
                Compresses the raw file bytes using standard gzip compression.
            </summary>
            <param name="fileBytes">The array of bytes read from the input file.</param>
            <returns>The gzip compressed array of bytes.</returns>
        </Compress>
        <Decompress>
            <summary>
                Decompresses the bytes read and decoded from the cover image(s) using standard
                gzip compression.
            </summary>
            <param name="readBytes">The array of bytes read and decoded from the cover images.</param>
            <returns>A byte array after being decompressed using standard gzip compression.</returns>
        </Decompress>
    </members>
    <members name="DataEncoderUtil">
        <Encode>
            <summary>
                Takes in a raw byte array, compresses, encodes base64, encrypts, and then
                returns as a binary string.
            </summary>
            <param name="bytes">The array of bytes to be encoded as a binary string.</param>
            <param name="password">The password used to encrypt the contents of the file.</param>
            <param name="useCompression">Tells the encoder whether or not to compress the input byte array.
                If an empty string is provided then no encryption will be performed.</param>
            <param name="dummyCount">The number of dummies to insert into the binary string being encoded. No dummies will be
            inserted if the dummy count is 0.</param>
            <param name="randomSeed">The random seed used to randomize the binary string being encoded. If the random seed is blank
            or null then no randmization will be done.</param>
            <param name="additionalHashIterations">
                The additional number of times the passwordor random seed should be hashed before being encrypting or
                decrypting content. Has no effect if neither of these values have been provided.
            </param>
            <returns>An binary string made up of the base64 bytes read from the file and possibly passed through an AES cipher.</returns>
            <exception cref="TransformationException">
                Thrown if there was an issue trying to pass the base64 encoded string through the AES cipher.
            </exception>
        </Encode>
        <Decode>
            <summary>
                Takes an encrypted binary string and returns a byte array that is the original bytes
                that made up the original input file.
            </summary>
            <param name="binary">The encrypted binary string.</param>
            <param name="password">The password used to decrypt the base64 string. If no password is provided then no decryption will be done to the string.</param>
            <param name="useCompression">Tells the encoder whether or not to uncompress the encoded binary string.</param>
            <param name="dummyCount">The number of dummies to remove from the binary string being decoded. If the dummy count is zero then no dummies will
            be removed.</param>
            <param name="randomSeed">The random seed to use in de-randomizing the binary string being decoded. If the random seed is null or blank then
            no randomization will be done.</param>
            <param name="additionalHashIterations">
                The additional number of times the passwordor random seed should be hashed before being encrypting or
                decrypting content. Has no effect if neither of these values have been provided.
            </param>
            <returns>A byte array containing the original decoded bytes of the file inputted during encoding.</returns>
            <exception cref="TransformationException">
                Thrown if an error occured while decrypting the base64 string or when decompressing the byte stream.
            </exception>
        </Decode>
    </members>
    <members name="DummyUtil">
        <InsertDummies>
            <summary>Inserts the specified number of dummy entries into the current byte array. This does will result in the creation of a new byte array.</summary>
            <param name="numDummies">The number of dummy entries to insert into the byte array.</param>
            <param name="value">The original byte array to be modified with the dummy entries.</param>
            <param name="randomSeed">A random seed used to seed the random number generator used when generating the dummy entries.</param>
            <returns>Returns a new byte array with the inserted dummy values.</returns>
        </InsertDummies>
        <RemoveDummies>
            <summary>
                Attempts to remove dummy entries from the byte array equal to the number of entries specified in the numDummies parameter.
                This will create and return a new byte array.
            </summary>
            <param name="numDummies">The number of dummy entries to remove from the byte array.</param>
            <param name="value">The byte array to remove the dummy entries from.</param>
            <param name="randomSeed">A random seed used to seed the random number generator used when generating the dummy entries.</param>
            <returns>If numDummies == 0 then it will return the original byte array otherwise will return the byte array with the dummy entries removed.</returns>
            <exception cref="TransformationException">Thrown if an our of range exception is caught while trying to remove the dummy entries from the chunk.</exception>
        </RemoveDummies>
    </members>
    <members name="EncoderProvider">
        <GetEncoder>
            <summary>Attempts to instantiate and return an IImageEncoder instance associated with the desired image format.</summary>
            <param name="imageFormat">The desired image format.</param>
            <returns>An IImageEncoder instance that corresponds to the requested image format.</returns>
            <exception cref="ArgumentValueException">Thrown if there is no encoder associated with the input image format.</exception>
        </GetEncoder>
        <GetEncoder2>
            <summary>Attempts to instantiate and return an IImageEncoder instance associated with the image format.</summary>
            <param name="imagePath">The path to the image from which the extension will be pulled and used to determine the correct
            encoder instance.</param>
            <returns>An IImageEncoder instance that corresponds to the requested image format.</returns>
            <exception cref="ArgumentValueException">Thrown if there is no encoder associated with the input image format.</exception>
        </GetEncoder2>
    </members>
    <members name="EncryptionUtil">
        <Encrypt>
            <summary>Encrypts the provided base64 encoded string using the input password.</summary>
            <param name="value">The base64 encoded string to encrypt.</param>
            <param name="password">The password to use in the AES cypher.</param>
            <param name="additionalPasswordHashIterations">
                The additional number of times the password should be hashed before being encrypting or decrypting content.
                Has no effect if no password has been provided.
            </param>
            <returns>An encrypted base64 encoded string.</returns>
        </Encrypt>
        <Decrypt>
            <summary>Decrypts the provided base64 encoded string using the input password.</summary>
            <param name="value">The base64 encoded string to decrypt.</param>
            <param name="password">The password to use in the AES cypher.</param>
            <param name="additionalPasswordHashIterations">
                The additional number of times the password should be hashed before being encrypting or decrypting content.
                Has no effect if no password has been provided.
            </param>
            <returns>A decrypted base64 encoded string.</returns>
        </Decrypt>
    </members>
    <members name="KeyUtil">
        <GenerateKey>
            <summary>Generates a salted and hashed key from the input value.</summary>
            <param name="password">The value to be salted and hashed.</param>
            <param name="additionalIterations">
                The additional number of times the password will be hashed.
                This is in addition to the default number of iterations of 450,000.
            </param>
            <returns>A byte representation of the salted and hashed key derived from the value param.</returns>
        </GenerateKey>
    </members>
    <members name="RandomizeUtil">
        <Randomize>
            <summary>
                Randomizes the already encrypted array of bytes.
            </summary>
            <param name="value">The bytes to be randomized.</param>
            <param name="randomSeed">The user provided random seed that will be used to initialize the random number generator.</param>
            <returns>A randomized binary string.</returns>
        </Randomize>
        <Reorder>
            <summary>
                Reverses the effect of the Randomize method when writing to file.
            </summary>
            <param name="value">The encrypted and randomized bytes to be re-ordered.</param>
            <param name="randomSeed">The user provided randoom seed that will be used to initialize the random number generator.</param>
            <returns>A non-randomized array of bytes matching the original input file.</returns>
        </Reorder>
    </members>
    <members name="Logger">
        <Trace>
            <summary>
                Logs a message to the log file with the level of Trace.
            </summary>
            <param name="message">The template string to log to file.</param>
            <param name="arguments">The arguments to be spliced into the template message string.</param>
        </Trace>
        <TraceProvider>
            <summary>
                Logs a message to the log file with the level of Trace.
            </summary>
            <param name="message">The template string to log to file.</param>
            <param name="provider">
                The producer function to provide the arguments to be spliced into the template message string.
                This will only be invoked if it is determine that the message, at the current log level, should
                be logged at all.
            </param>
        </TraceProvider>
        <Debug>
            <summary>
                Logs a message to the log file with the level of Debug.
            </summary>
            <param name="message">The template string to log to file.</param>
            <param name="arguments">The arguments to be spliced into the template message string.</param>
        </Debug>
        <DebugProvider>
            <summary>
                Logs a message to the log file with the level of Debug.
            </summary>
            <param name="message">The template string to log to file.</param>
            <param name="provider">
                The producer function to provide the arguments to be spliced into the template message string.
                This will only be invoked if it is determine that the message, at the current log level, should
                be logged at all.
            </param>
        </DebugProvider>
        <Error>
            <summary>Logs a message to the log file with the level of Error.</summary>
            <param name="message">The template string to log to file.</param>
            <param name="arguments">The arguments to be spliced into the template message string.</param>
        </Error>
        <ErrorProvider>
            <summary>
                Logs a message to the log file with the level of Error.
            </summary>
            <param name="message">The template string to log to file.</param>
            <param name="provider">
                The producer function to provide the arguments to be spliced into the template message string.
                This will only be invoked if it is determine that the message, at the current log level, should
                be logged at all.
            </param>
        </ErrorProvider>
    </members>
    <members name="BasicImageInfo">
        <Width>
            <summary>The width of the currently loaded image.</summary>
        </Width>
        <Height>
            <summary>The height of the currently loaded image.</summary>
        </Height>
        <Path>
            <summary>The absolute path to the image file at the time it was loaded.</summary>
        </Path>
        <Accessor>
            <summary>Accessor to lookup the colour of a pixel at the specified position.</summary>
            <param name="x">The x position of the pixel.</param>
            <param name="y">The y position of the pixel.</param>
        </Accessor>
        <Save>
            <summary>Save the currently loaded image to the specified location.</summary>
            <param name="pathToImage">The absolute or relative file path where the image should be written to.</param>
            <param name="encoder">The encoding options to save the image with.</param>
        </Save>
    </members>
    <members name="ConsoleProxy">
        <Write>
            <summary>Writes the specified string to output using Console.Write.</summary>
            <param name="line">The string to write to the console without an added new line ending.</param>
        </Write>
        <WriteLine>
            <summary>Writes the specified string to output using Console.WriteLine.</summary>
            <param name="line">The string to write to the console with an attached new line break.</param>
        </WriteLine>
        <ReadKey>
            <summary>Reads a key press from the console using Console.ReadKey.</summary>
            <param name="intercept">Intecept.</param>
            <returns>The info of the key that was pressed.</returns>
        </ReadKey>
    </members>
    <members name="ImageProxy">
        <LoadImage>
            <summary>Invokes the Image.Load from the image sharp API to load an image from the provided path.</summary>
            <param name="pathToImage">The absolute or relative path to the image to load.</param>
            <returns>A new IBasicImageInfo instance loaded from the specified path.</returns>
        </LoadImage>
        <GetImageMimeType>
            <summary>Retrieves the format of the image located at the provided path.</summary>
            <param name="pathToImage">The absolute or relative path to the image.</param>
            <returns>The format of the image located at the input path.</returns>
        </GetImageMimeType>
    </members>
    <members name="FileIOProxy">
        <GetFileSizeBytes>
            <summary>Attempts to get the size of the file, specified by input path, in bytes.</summary>
            <param name="pathToFile">The absolute or relative path to the file.</param>
            <returns>The size of the file in bytes.</returns>
        </GetFileSizeBytes>
        <IsExistingFile>
            <summary>Checks if the file at the specified path exists and is a file and not a directory.</summary>
            <param name="pathToFile">The absolute or relative path to the file.</param>
            <returns>True if the file exists, otherwise false.</returns>
        </IsExistingFile>
        <OpenFileForRead>
            <summary>Opens an IO stream to read from a specified file.</summary>
            <param name="pathToFile">The path to the file to open the read stream to.</param>
            <returns>A stream made to read from the specified file.</returns>
        </OpenFileForRead>
        <OpenFileForWrite>
            <summary>Opens an IO stream to the target destination for write.</summary>
            <param name="pathToFile">The path to the file to write to.</param>
            <returns>A stream made to write to the specified destination.</returns>
        </OpenFileForWrite>
        <Delete>
            <summary>Deletes the specified file.</summary>
            <param name="pathToFile">The relative or absolute path to the file to delete.</param>
        </Delete>
    </members>
    <members name="ReadWriteStream">
        <Read>
            <summary>
                Reads a number of bytes from the current file stream.
            </summary>
            <param name="array">The array of bytes for values to be read into.</param>
            <param name="offset">The byte offset to start reading from.</param>
            <param name="count">The number of bytes to read from the file.</param>
            <returns>The number of bytes read from the file stream.</returns>
        </Read>
        <Write>
            <summary>Writes a number of bytes to the current file stream.</summary>
            <param name="array">The array of bytes to write to the stream.</param>
            <param name="offset">The byte offset to start writing from.</param>
            <param name="count">The number of bytes to write to the file.</param>
        </Write>
        <Flush>
            <summary>Calls flush on the current file stream.</summary>
        </Flush>
    </members>
    <members name="ChunkTableHelper">
        <ConvertChunkTableToBinary>
            <summary>
                Converts the lengths of all the chunks in the table to a binary string and,
                if the randomSeed is not null or blank, ranmizes that binary string.
            </summary>
            <param name="chunkLengths">The array of chunk lengths to write.</param>
            <param name="randomSeed">The seed to ranomize the binary string with.</param>
            <returns>A single binary string representing the chunk table.</returns>
        </ConvertChunkTableToBinary>
        <ConvertBinaryToChunkTable>
            <summary>
                Converts the raw binary string containing the content chunk table and converts it to an array
                of integers representing the lengths of each entry in the chunk table. This will not return the
                first entry in the chunk table that represents the number of entries in the table.
            </summary>
            <param name="binary">The binary string containing the content chunk table to un-randomize.</param>
            <param name="chunkCount">The number of expected chunks in the content chunk table.</param>
            <param name="randomSeed">The random seed required to re-order the binary string.</param>
            <returns>A list of integers representing the number of bits in each chunk table.</returns>
        </ConvertBinaryToChunkTable>
        <GetChunkTableSize>
            <summary>Retrieve the number of chunk table entries from the leading 32 bits of the first cover image.</summary>
            <param name="binary">The 33 bit long binary string read from the leading cover image.</param>
            <param name="randomSeed">The seed used to re-order the binary string.</param>
            <returns>An integer representing the number of entries in the content chunk table.</returns>
        </GetChunkTableSize>
    </members>
</docs>